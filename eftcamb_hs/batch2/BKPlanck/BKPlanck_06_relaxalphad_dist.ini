# BICEP2/Keck Array and Planck Joint Analysis January 2015 Data Products
# The BICEP2/Keck and Planck Collaborations, A Joint Analysis of BICEP2/Keck Array and Planck Data
# http://bicepkeck.org/
#
# File: BKPlanck_06_relaxalphad_dist.ini 
# Date: 2015-01-28
#
# BICEP2/Keck Array/Planck joint likelihood
# 
# The file contains the input parameters to CosmoMC's getdist to reproduce the
# likelihoods of the variations to the fiducial analysis 
# Varying the dust power spectrum shape
# See Section III C of A Joint Analysis of BICEP2/Keck Array and Planck Data
# using CosmoMC release Jan 2015

file_root = chains/BKPlanck_06_relaxalphad/BKPlanck
out_dir = dists/BKPlanck_06_relaxalphad
plot_data_dir = dists/BKPlanck_06_relaxalphad
chain_num = -1

# Need to give limits if prior cuts off distribution where not very small
limits[r] = 0 N
limits[rBB] = 0 N
limits[r02]= 0 N
limits[r10]= 0 N

# if zero, columnnum calculated automatically as total number of columns
columnnum  = 0
out_root = 

# If 0 assume 1 and no chain filename prefixes; if -1 read as many as exist
first_chain = 
exclude_chain = 

# For disgarding burn-in if using raw chains
# if < 1 interpreted as a fraction of the total number of rows (0.3 ignores first 30% of lines)
ignore_rows = 0.3

# Number of output bins for plotting, and relative scale of the Gaussian kernel
# Should check plots are robust to changes in these parameters. 
num_bins = 100
num_bins_2D = 40

# IMPORTANT NOTES REGARDING smooth_scale_1D:
# BKPlanck: The choice of the smooth_scale_1D has impact on the likelihood of r for r->0
# since the smoothing kernel is asked to smooth over the cut-off at r=0. This results in
# and artifical increase of the likelihood towards r=0. Choose a small smoothing scale
# to be closer to the underlying MCMC sample distribution:
smooth_scale_1D = 0.0625
# if >= 1 smooth by smooth_scale_1D bin widths
# if > 0  and <1 smooth by Gaussian of smooth_scale_1D standard deviations in each parameter (around 0.2-0.3 is often good)
# if < 0 uses automatic smoothing length (changes with parameter)
# -the overall smoothing length is scaled by abs(smooth_scale_1D) from very crude guess at best overall scale

# For 2D this is the smoothing scale relative to the bin size
smooth_scale_2D = 1

# for 3d plots
max_scatter_points = 2000

# if T produced B&W printer friendly output
B&W = F

# version of MatLab you are using if plot_ext=m
matlab_version = 7
plot_ext = m

# To make e.g. 1D plots automatically uncomment this
# finish_run_command= matlab < %ROOTNAME%.m

# Switches; auto_label labels all parameters by their number
no_plots = F
no_tests = F
auto_label = F
# samples_are_chains = F can be useful for other samples when first two columns not present
samples_are_chains = T

# Include these in 1D plots for comparison - must have same parameters
compare_num = 0
compare1 = basic6_cmb

line_labels= F

plot_meanlikes = T
shade_meanlikes = T

# if non-zero, output _thin file, thinned by thin_factor
thin_factor = 4
# Do probabilistic importance sampling to single samples
make_single_samples = F
single_thin = 4

# Do simple importance sampling
adjust_priors = F
# Map parameters to other derived quantities
map_params = F

num_contours = 2
contour1 = 0.68
contour2 = 0.95

# If the distribution is skewed, so two probability of tails differs by more than credible_interval_threshold
# of the peak value, use equal-probability limits rather than integrating inwards equally at both tails
# Note credible interval depend on smoothing
credible_interval_threshold = 0.05

# if we only want 2D plots agains a particular variable
plot_2D_param = 0

# if above zero, instead plot just these combinations:
# if both zero it will plot most correlated variables
plot_2D_num = 1
plot1 = r BBdust
plot2 =

# number of sample plots, colored by third parameter
# if last parameter is 0 or -1 colored by the parameter most correlated
# with one of the eigenvector directions (e.g. parallel or orthogonal to degeneracy)
num_3D_plots = 0
# 3D_plot1 = H0 omegam tau

# Output 2D plots for param combos with 1D marginalized plots along the diagonal
triangle_plot = F
# triangle_params = omegabh2 omegach2 tau omegak mnu nnu yhe Alens ns nrun logA r H0 omegam omegal sigma8 r02

# e.g. colormap('jet')
matlab_colscheme =

# Parameters to use. If not specified use all parameters which have lables.
# plot_params = omegabh2 omegach2 tau ns

# Get set label to empty to not include a parameter in the parameter_names file
# lab[asz]=

# marker[x] adds vertical line to MatLab 1D plot
marker[nrun] = 0

# all_limits sets all limitsxx for all variables to the same; can be useful for bins
all_limits = 

# compute two-tail marginalized limits irrespective of limits settings above
# (otherwise limits are two-tail only for those parameters without limits)
force_twotail = F

# PCA - analysis output in file file_root.PCA
# number of parameter to do PCA for
PCA_num = 0
PCA_normparam = omegam
# The parameters to use
PCA_params = omegam H0 tau
# L for log(x), M for log(-x), N for no log
PCA_func   = LLL

# if parameter_names empty set from file_root.paramnames if it exists
# otherwise set up labels manually in this file using lab1=... etc.
# parameter_names = chains/Planck_CFHTLENS6_r1_1.paramnames
# params_CMB.paramnames


# If generated chain at higher temperature can cool for computing results
cool = 1
