

#if zero, columnnum calculated automatically as total number of columns
columnnum  = 0

out_root = 

#If generated chain at higher temperature can cool for computing results
cool = 1

#If 0 assume 1 and no chain filename prefixes
chain_num = 8
first_chain = 
exclude_chain = 

#Number of output bins for plotting, and relative scale of the Gaussian kernel
#Should check plots are robust to changes in these parameters. 
num_bins = 100
num_bins_2D=40

smooth_scale_1D =0.25
#if >= 1 smooth by smooth_scale_1D bin widths
#if > 0  and <1 smooth by Gaussian of smooth_scale_1D standard deviations in each parameter (around 0.2-0.3 is often good)
#if < 0 uses automatic smoothing length (changes with parameter)
#-the overall smoothing length is scaled by abs(smooth_scale_1D) from very crude guess at best overall scale

#For 2D this is the smoothing scale relative to the bin size
smooth_scale_2D =2

#for 3d plots
max_scatter_points = 2000

#For disgarding burn-in if using raw chains
#if < 1 interpreted as a fraction of the total number of rows (0.3 ignores first 30% of lines)
ignore_rows = 0.3

#if T produced B&W printer friendly output
B&W = F

#set to py for python
plot_ext = py

#version of MatLab you are using
#matlab_version = 7

subplot_size_inch = 4.0
subplot_size_inch2 = 4.0
subplot_size_inch3 = 6.0

plot_output = pdf

line_labels = T

#Switches; auto_label labels all parameters by their number
no_plots = F
no_tests = F
auto_label = F
#samples_are_chains = F can be useful for other samples when first two columns not present
samples_are_chains = T

plot_meanlikes = F
shade_meanlikes = F

# if non-zero, output _thin file, thinned by thin_factor
thin_factor = 0
#Do probabilistic importance sampling to single samples
make_single_samples = F
single_thin = 4

#Do simple importance sampling
adjust_priors = F
#Map parameters to other derived quantities
map_params = F

#Use a Gaussian smoothing with width of the bin size
#Otherwise use top hat bins
smoothing = T

num_contours = 3
contour1 = 0.68
contour2 = 0.95
contour3 = 0.99

#limit to use for split test and Raftery-Lewis convergence diagonostics
converge_test_limit=0.95

#If the distribution is skewed, so two probability of tails differs by more than credible_interval_threshold
#of the peak value, use equal-probability limits rather than integrating inwards equally at both tails
#Note credible interval depend on smoothing
credible_interval_threshold = 0.05

#if we only want 2D plots agains a particular variable
plot_2D_param = 0

#if above zero, instead plot just these combinations:
#if both zero it will plot most correlated variables
plot_2D_num = 0
plot1 = ns omegabh2
plot2 =

#number of sample plots, colored by third parameter
#if last parameter is 0 or -1 colored by the parameter most correlated
#with one of the eigenvector directions (e.g. parallel or orthogonal to degeneracy)
num_3D_plots = 0
3D_plot1 = H0 omegam tau

#get samples anyway, e.g, for python plots
make_scatter_samples=T

#Output 2D plots for param combos with 1D marginalized plots along the diagonal
triangle_plot = T
triangle_params = omegabh2 omegach2 tau omegak mnu nnu yhe Alens ns nrun logA r H0 omegam omegal sigma8 r02

#e.g. colormap('jet')
matlab_colscheme =

#Parameters to use. If unspecified use all parameters which have labels.
#plot_params = omegabh2 omegach2 tau ns

#marker[x] adds vertical line to MatLab 1D plot
marker[nrun] = 0

#Need to give limits if prior cuts off distribution where not very small
#base parameter limits are set automatically from the ranges file
limits[H0]=20 100
limits[zrei] = 2 N
limits[r10] = 0 N
limits[r02] = 0 N
limits[omeganuh2]=0 N
limits[omegam]=0 N
limits[rBB] = 0 N
limits[AT] = 0 N
limits[ctlamp] = 0 N
limits[BAO]=0 N
limits[HST]=0 N
limits[DR11LOWZ]=0 N


#all_limits sets all limitsxx for all variables to the same; can be useful for bins
all_limits = 

#compute two-tail marginalized limits irrespective of limits settings above
#(otherwise limits are two-tail only for those parameters without limits)
force_twotail = F

#PCA - analysis output in file file_root.PCA
#number of parameter to do PCA for
PCA_num = 0
PCA_normparam = omegam
#The parameters to use
PCA_params = omegam H0 tau
#L for log(x), M for log(-x), N for no log
PCA_func   = LLL
